package com.crone.skillbranchtest.data.storage.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_TITLES".
*/
public class TitlesDao extends AbstractDao<Titles, Long> {

    public static final String TABLENAME = "PERSON_TITLES";

    /**
     * Properties of entity Titles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TitlePersonRemoteId = new Property(1, Long.class, "titlePersonRemoteId", false, "TITLE_PERSON_REMOTE_ID");
        public final static Property IsTitle = new Property(2, Boolean.class, "isTitle", false, "IS_TITLE");
        public final static Property Characteristic = new Property(3, String.class, "characteristic", false, "CHARACTERISTIC");
    }

    private DaoSession daoSession;

    private Query<Titles> persons_CharacteristicsQuery;

    public TitlesDao(DaoConfig config) {
        super(config);
    }
    
    public TitlesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_TITLES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE_PERSON_REMOTE_ID\" INTEGER NOT NULL ," + // 1: titlePersonRemoteId
                "\"IS_TITLE\" INTEGER NOT NULL ," + // 2: isTitle
                "\"CHARACTERISTIC\" TEXT NOT NULL UNIQUE );"); // 3: characteristic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_TITLES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Titles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTitlePersonRemoteId());
        stmt.bindLong(3, entity.getIsTitle() ? 1L: 0L);
        stmt.bindString(4, entity.getCharacteristic());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Titles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTitlePersonRemoteId());
        stmt.bindLong(3, entity.getIsTitle() ? 1L: 0L);
        stmt.bindString(4, entity.getCharacteristic());
    }

    @Override
    protected final void attachEntity(Titles entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Titles readEntity(Cursor cursor, int offset) {
        Titles entity = new Titles( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // titlePersonRemoteId
            cursor.getShort(offset + 2) != 0, // isTitle
            cursor.getString(offset + 3) // characteristic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Titles entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitlePersonRemoteId(cursor.getLong(offset + 1));
        entity.setIsTitle(cursor.getShort(offset + 2) != 0);
        entity.setCharacteristic(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Titles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Titles entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Titles entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "characteristics" to-many relationship of Persons. */
    public List<Titles> _queryPersons_Characteristics(Long titlePersonRemoteId) {
        synchronized (this) {
            if (persons_CharacteristicsQuery == null) {
                QueryBuilder<Titles> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TitlePersonRemoteId.eq(null));
                persons_CharacteristicsQuery = queryBuilder.build();
            }
        }
        Query<Titles> query = persons_CharacteristicsQuery.forCurrentThread();
        query.setParameter(0, titlePersonRemoteId);
        return query.list();
    }

}
